AWSTemplateFormatVersion: '2010-09-09'
Description: Pure CloudFormation - S3 bucket and Lambda function without S3 notification

Resources:
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "img-pro-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ImageBucket.Arn
                  - !Sub "${ImageBucket.Arn}/*"

  ProcessImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "process-image-${AWS::StackName}"
      Handler: process.lambda_handler
      Runtime: python3.10
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-lambda-code-bucket
        S3Key: your-lambda-code-key.zip
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageBucket

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessImageFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt ImageBucket.Arn
