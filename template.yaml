AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless image upload and processing using plain CloudFormation

Parameters:
  BucketName:
    Type: String
    Default: serverless-image-upload-bucket

Resources:

  ## S3 Bucket
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessImageFunction.Arn

  ## Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3LogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ImageBucket.Arn
                  - !Sub "${ImageBucket.Arn}/*"

  ## Upload Image Lambda
  UploadImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UploadImageFunction
      Runtime: python3.10
      Handler: upload.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import uuid

          def lambda_handler(event, context):
              s3 = boto3.client("s3")
              bucket = event["headers"].get("bucket")
              file_name = str(uuid.uuid4()) + ".jpg"
              file_content = base64.b64decode(event["body"])
              s3.put_object(Bucket=bucket, Key=file_name, Body=file_content)
              return {
                  "statusCode": 200,
                  "headers": {
                      "Access-Control-Allow-Origin": "*"
                  },
                  "body": f"Uploaded {file_name}"
              }

  ## API Gateway
  ImageUploadApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ImageUploadApi

  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ImageUploadApi.RootResourceId
      PathPart: upload
      RestApiId: !Ref ImageUploadApi

  UploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref UploadResource
      RestApiId: !Ref ImageUploadApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadImageFunction.Arn}/invocations
            - UploadImageFunction.Arn: !GetAtt UploadImageFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "body": "$util.base64Encode($input.body)",
              "headers": {
                "bucket": "${BucketName}"
              }
            }
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ## API Deployment
  UploadApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: UploadMethod
    Properties:
      RestApiId: !Ref ImageUploadApi
      StageName: Prod

  ## Permission for API Gateway to invoke Upload Lambda
  UploadLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadImageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ImageUploadApi}/*/*"

  ## Process Image Lambda
  ProcessImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessImageFunction
      Runtime: python3.10
      Handler: process.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              print("Processing image upload event")
              return {"statusCode": 200}

  ## Permission for S3 to invoke Process Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessImageFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt ImageBucket.Arn

Outputs:
  UploadApiUrl:
    Description: API Gateway URL for uploading images
    Value: !Sub "https://${ImageUploadApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/upload"

  ImageBucketName:
    Description: S3 bucket for image uploads
    Value: !Ref ImageBucket
