AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless image processing app with upload, processing, SNS, CORS, and CloudWatch.

Globals:
  Function:
    Runtime: python3.10
    Timeout: 10
    Tracing: Active
    Environment:
      Variables:
        BUCKET_NAME: !Ref ImageBucket
        TOPIC_ARN: !Ref NotificationTopic

Resources:

  ImageBucket:
    Type: AWS::S3::Bucket

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Image Processing Notifications

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${ImageBucket.Arn}/*"
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref NotificationTopic

  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadImageFunction
      Handler: upload.lambda_handler
      CodeUri: .
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiUpload:
          Type: Api
          Properties:
            Path: /uploadimage
            Method: post
            RestApiId: !Ref ImageApi

  ProcessImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessImageFunction
      Handler: process.lambda_handler
      CodeUri: .
      Role: !GetAtt LambdaExecutionRole.Arn

  ImageApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ImageApi
      StageName: Prod
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"

  # Lambda invoke permission for S3 -> Processor
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProcessImageFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt ImageBucket.Arn

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/uploadimage"

  S3Bucket:
    Description: "Image Upload S3 Bucket"
    Value: !Ref ImageBucket

  SnsTopic:
    Description: "Notification Topic ARN"
    Value: !Ref NotificationTopic
