AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Image Upload and Processing with DevOps Automation

Globals:
  Function:
    Timeout: 10
    Runtime: python3.10
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        BUCKET_NAME: !Ref ImageBucket
        SNS_TOPIC_ARN: !Ref ImageNotificationTopic

Resources:

  ### üöÄ S3 Bucket for Image Uploads
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "img-pro-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"

  ### üåê API Gateway for Uploading Images
  ImageApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ImageApi
      StageName: Prod
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"

  ### üß† Lambda Function for Uploading Images
  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: upload.lambda_handler
      CodeUri: .
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UploadImageAPI:
          Type: Api
          Properties:
            Path: /uploadimage
            Method: post
            RestApiId: !Ref ImageApi

  ### üß† Lambda Function to Process Images After Upload
  ProcessImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.lambda_handler
      CodeUri: .
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        S3UploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref ImageBucket
            Events:
              - s3:ObjectCreated:*.jpg
              - s3:ObjectCreated:*.jpeg
              - s3:ObjectCreated:*.png

  ### üõ† IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3LogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ImageBucket.Arn
                  - !Sub "${ImageBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ImageNotificationTopic

  ### üîî SNS Topic for Notifications
  ImageNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ImageProcessingNotifications
      Subscription:
        - Protocol: email
          Endpoint: pradhanamitab999@gmail.com  # ‚úÖ Replace with your actual email

  ### üï∏ Static Website Hosting (S3)
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "image-frontend-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"
      WebsiteConfiguration:
        IndexDocument: index.html
      AccessControl: PublicRead
    DeletionPolicy: Retain

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${WebsiteBucket.Arn}/*"

Outputs:

  UploadAPIEndpoint:
    Description: "API Gateway endpoint to upload image"
    Value: !Sub "https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/uploadimage"

  ImageBucketName:
    Description: "The name of the S3 bucket for image uploads"
    Value: !Ref ImageBucket

  WebsiteURL:
    Description: "Frontend static website URL"
    Value: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"

  SNSTopicArn:
    Description: "SNS Topic ARN for notifications"
    Value: !Ref ImageNotificationTopic
