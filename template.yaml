AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Image Upload and Processing (Non-SAM Template)

Resources:

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "img-processing-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3LogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ImageBucket.Arn
                  - !Sub "${ImageBucket.Arn}/*"

  UploadImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UploadImageFunction
      Runtime: python3.10
      Handler: upload.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-lambda-code-bucket-name
        S3Key: upload.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageBucket

  ProcessImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessImageFunction
      Runtime: python3.10
      Handler: process.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-lambda-code-bucket-name
        S3Key: process.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageBucket

  ProcessImagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessImageFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt ImageBucket.Arn

  BucketNotification:
    Type: AWS::S3::BucketNotification
    Properties:
      Bucket: !Ref ImageBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpg
            Function: !GetAtt ProcessImageFunction.Arn
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .png
            Function: !GetAtt ProcessImageFunction.Arn

  ImageUploadApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: UploadImageAPI

  ImageUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ImageUploadApi.RootResourceId
      PathPart: uploadimage
      RestApiId: !Ref ImageUploadApi

  UploadImageMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageUploadApi
      ResourceId: !Ref ImageUploadResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadFunctionArn}/invocations
            - UploadFunctionArn: !GetAtt UploadImageFunction.Arn

  UploadLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadImageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ImageUploadApi}/*/POST/uploadimage"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: UploadImageMethod
    Properties:
      RestApiId: !Ref ImageUploadApi
      StageName: Prod

Outputs:

  ApiEndpoint:
    Description: API Gateway endpoint for image upload
    Value: !Sub "https://${ImageUploadApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/uploadimage"

  BucketName:
    Description: S3 bucket for image uploads
    Value: !Ref ImageBucket
