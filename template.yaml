AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for image upload and processing with CORS, CloudWatch, SNS

Globals:
  Function:
    Runtime: python3.10
    Timeout: 10
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        BUCKET_NAME: !Ref ImageBucket
        TOPIC_ARN: !Ref NotificationTopic

Resources:

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            # Note: This refers to the ARN of the Lambda function
            Function: !GetAtt ProcessImageFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpg
          - Event: s3:ObjectCreated:*
            # Note: This refers to the ARN of the Lambda function
            Function: !GetAtt ProcessImageFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .png

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Image Processing Notifications

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - s3:GetObject
                  - s3:PutObject
                  - sns:Publish
                Resource: "*"
              # Add permissions for ProcessImageFunction to receive S3 invocations
              # This is crucial if SAM doesn't automatically add it when triggered via bucket config
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ProcessImageFunction.Arn # Grant invoke permission to itself (if needed)

  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: upload.lambda_handler
      CodeUri: .
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UploadApi:
          Type: Api
          Properties:
            Path: /uploadimage
            Method: post
            RestApiId: !Ref ImageApi

  ProcessImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.lambda_handler
      CodeUri: .
      Role: !GetAtt LambdaExecutionRole.Arn
      # If the S3 trigger on the bucket doesn't automatically add permission,
      # you might need to add it here, but typically SAM handles it.
      # For now, let's rely on the above change.

  # REMOVED: LambdaInvokePermission
  # This resource is a common cause of circular dependencies when S3 notifications are defined on the bucket.
  # SAM/CloudForma tion often implicitly creates the necessary permissions.
  # If after this removal, you still get permission errors for S3 invoking Lambda,
  # you would add an inline policy to the LambdaExecutionRole or the ProcessImageFunction's policies
  # specifically granting 'lambda:InvokeFunction' permissions, targeting the ProcessImageFunction's ARN.

  ImageApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ImageApi
      StageName: Prod
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"

Outputs:
  UploadEndpoint:
    Description: API Gateway endpoint for uploading images
    Value: !Sub "https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/uploadimage"

  BucketName:
    Description: Image storage bucket
    Value: !Ref ImageBucket

  SnsTopic:
    Description: SNS Topic ARN
    Value: !Ref NotificationTopic